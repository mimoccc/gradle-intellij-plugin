{pre

## Configuration

Plugin provides the following options to configure target IntelliJ SDK and build archive

### Setup DSL

The following attributes are a part of the Setup DSL <kbd>intellij { ... }</kbd> in which allows you to setup the environment and dependencies.

pre}
{\n}


{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}
{--                                               INTELLIJ DSL TABLE                                                --}
{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| Attributes | Values | {\n}
| :------------- | :--------- | {\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{--                                                   TABLE CONTENT                                                 --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>pluginName</kbd> - The name of the target zip-archive and defines the name of plugin artifact.
|
**Acceptable Values:** <br/><kbd>String</kbd> - `'gradle-intellij-plugin'` <br/><br/>

**Default Value:** <kbd>$project.name</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

{\n}
#### IntelliJ Platform Properties{\n}
| Attributes | Values | {\n}
| :------------- | :--------- | {\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>version</kbd> - The version of the IntelliJ Platform IDE that will be used to build the plugin. <br/><br/>

Please see [Plugin Compatibility](https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html) in SDK docs for more details.<br/><br/>

**Notes:**
    <ul>
        <li>Value may have `IC-`, `IU-`, `CL-`, `PY-`, `PC-`, `RD-` or `JPS-` prefix in order to define IDE distribution type.</li>
        <li>`intellij.version` and `intellij.localPath` should not be specified at the same time.</li>
    </ul>
|
**Acceptable Values:**
    <ul>
        <li><kbd>version #</kbd><br/>`'2017.2.5'` or `'IC-2017.2.5'` </li>
        <li><kbd>build #</kbd><br/>`'172.4343'` or `'IU-172.4343'` </li>
        <li><kbd>'LATEST-EAP-SNAPSHOT'</kbd></li>
    </ul>

<br/><br/>All available JetBrains IDEs versions can be found at [IntelliJ Artifacts](https://www.jetbrains.org/intellij/sdk/docs/reference_guide/intellij_artifacts.html) page.<br/><br/>

**Default Value:** <kbd>'LATEST-EAP-SNAPSHOT'</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>type</kbd> - The type of IDE distribution.
|
**Acceptable Values:**
    <ul>
        <li><kbd>'IC'</kbd> - IntelliJ IDEA Community Edition. </li>
        <li><kbd>'IU'</kbd> - IntelliJ IDEA Ultimate Edition. </li>
        <li><kbd>'JPS'</kbd> - JPS-only. </li>
        <li><kbd>'CL'</kbd> - CLion. </li>
        <li><kbd>'PY'</kbd> - PyCharm Professional Edition. </li>
        <li><kbd>'PC'</kbd> - PyCharm Community Edition. </li>
        <li><kbd>'RD'</kbd> - Rider.</li>
    </ul>

**Default Value:** <kbd>'IC'</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>localPath</kbd> - The path to locally installed IDE distribution that should be used as a dependency. <br/><br/>

**Notes:**
    <ul>
        <li>`intellij.version` and `intellij.localPath` should not be specified at the same time.</li>
    </ul>

|
**Acceptable Values:** <br/>
<kbd>path</kbd> - `'/Applications/IntelliJIDEA.app'`</br></br>

**Default Value:** <kbd>null</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>plugins</kbd> - The list of bundled IDE plugins and plugins from the [JetBrains Plugin Repository](https://plugins.jetbrains.com/). <br/><br/>

Please see [Plugin Dependencies](http://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html) in SDK docs for more details.<br/><br/>

**Notes:**
    <ul>
        <li>For plugins from the JetBrains Plugin Repository use format `pluginId:version`.</li>
        <li>For bundled plugins version should be omitted: e.g. `org.intellij.groovy` for `IDEA/plugins/Groovy` plugin.</li>
        <li>For sub-projects use project reference `project(':subproject')`.</li>
        <li>If you need to refer plugin's classes from your project, you also have to define a dependency in your `plugin.xml`.</li>
    </ul>
|
**Acceptable Values:**
    <ol>
        <li><kbd>org.plugin.id:version[@channel]</kbd><br/>`'org.intellij.plugins.markdown:8.5.0', 'org.intellij.scala:2017.2.638@nightly'`</li>
        <li><kbd>bundledPluginName</kbd><br/>`'android', 'Groovy'`</li>
        <li><kbd>project(':projectName')</kbd><br/>`project(':plugin-subproject')`</li>
    </ol>

**Default Value\:** none
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

{\n}
#### Building Properties{\n}
| Attributes | Values | {\n}
| :------------- | :--------- | {\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}


| <kbd>updateSinceUntilBuild</kbd> - Should plugin patch `plugin.xml` with since and until build values? <br/><br/>

**Notes:**
    <ul>
        <li>If `true` then user-defined values from `patchPluginXml.sinceBuild` and `patchPluginXml.untilBuild` will be used (or their default values if none set). </li>
    </ul>
|
**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>

**Default Value:** <kbd>true</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>sameSinceUntilBuild</kbd> - Should plugin patch `plugin.xml` with an until build value that is just an "open" since build?  <br/><br/>

**Notes:**
    <ul>
        <li>Is useful for building plugins against EAP IDE builds.</li>
        <li>If `true` then the user-defined value from `patchPluginXml.sinceBuild` (or its default value) will be used as a `since` and an "open" `until` value. </li>
        <li>If `patchPluginXml.untilBuild` has a value set, then `sameSinceUntilBuild` is ignored.</li>
    </ul>
|
**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>

**Default Value:** <kbd>false</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>instrumentCode</kbd> - Should plugin instrument java classes with nullability assertions and compile forms created by IntelliJ GUI Designer?
|
**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>

**Default Value:** <kbd>true</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

{\n}
#### Run/Debug IDE Properties{\n}
| Attributes | Values | {\n}
| :------------- | :--------- | {\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>alternativeIdePath</kbd> - The absolute path to the locally installed JetBrains IDE. <br/><br/>

**Notes:**
    <ul>
        <li>Use this property if you want to test your plugin in any non-IDEA JetBrains IDE such as WebStorm or Android Studio.</li>
        <li>Empty value means that the IDE that was used for compiling will be used for running/debugging as well.</li>
    </ul>
|
**Acceptable Values:** <br/>
<kbd>path</kbd> - `'/Applications/Android Studio.app'`<br/><br/>

**Default Value:** none
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>sandboxDirectory</kbd> - The path of sandbox directory that is used for running IDE with developing plugin.
|
**Acceptable Values:** <br/>
<kbd>path</kbd> - `'${{project.rootDir}/.sandbox'` <br/><br/>

**Default Value:** <kbd>'${{project.buildDir}/idea-sandbox'</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

{\n}
#### Infrastructure Properties{\n}
| Attributes | Values | {\n}
| :------------- | :--------- | {\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>intellijRepo</kbd>, <kbd>jreRepo</kbd> - Urls of repositories for downloading IDE distributions and JetBrains Java Runtime. <br/><br/>
|
**Acceptable Values:** <br/>
<kbd>url</kbd><br/><br/>
**Default Value:** <kbd>jetbrains.com/intellij-repository</kbd>, <kbd>jetbrains.bintray.com/intellij-jdk</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>pluginsRepo {"{"} ... }</kbd> - Configure repositories for downloading plugin dependencies. <br/><br/>
|
**Configuration:** <br/>
<kbd>marketplace()</kbd> - use Maven repository with plugins listed in the JetBrains marketplace<br/>
<kbd>maven(repoUrl)</kbd> - use custom Maven repository with plugins<br/>
<kbd>custom(pluginsXmlUrl)</kbd> - use [custom plugin repository](https://www.jetbrains.com/help/idea/managing-plugins.html) <br/>
<br/>
**Default Configuration:** <kbd>pluginsRepo {"{"} marketplace() }</kbd>
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>downloadSources</kbd> - Should plugin download IntelliJ sources while initializing Gradle build? <br/><br/>

**Notes:**
    <ul>
        <li>Since sources are not needed while testing on CI, you can set it to `false` for a particular environment.</li>
    </ul>
|
**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>

**Default Value:** <kbd>true</kbd> if `CI` environment variable is not set
|{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

| <kbd>ideaDependencyCachePath</kbd> - The absolute path to the local directory that should be used for storing IDE distributions. <br/><br/>
**Notes:**
    <ul>
        <li>Empty value means the Gradle cache directory will be used.</li>
    </ul>
|
**Acceptable Values:** <br/>
<kbd>path</kbd> - `'<example>'`<br/><br/>
**Default Value:** none
|{\n}{\n}

{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}
{--                                                    TABLE END                                                    --}
{-- --------------------------------------------------------------------------------------------------------------- --}
{-- --------------------------------------------------------------------------------------------------------------- --}

{pre

### Running DSL

`RunIde` tasks (both `runIde` and `buildSearchableOptions`) extend [JavaExec](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html) Gradle task,
all configuration attributes of `JavaExec` task can be used in `RunIde` as well.

In addition to that, following attributes may be used to customize IDE running:

| **Attributes**              | **Default Value**  |
| :-------------------------- | :----------------- |
| <kbd>jbrVersion</kbd> JetBrains Java runtime version to use when running the IDE with the plugin. | **Acceptable Values:** <kbd>String</kbd> - E.g. `'8u112b752.4'`, `'8u202b1483.24'`, or `'11_0_2b159'`. Prefixes `jbrex`, `jbrx` or `jbr` are allowed.<br/><br/>All JetBrains Java versions are available at [BinTray](https://bintray.com/jetbrains/intellij-jbr/).<br/><br/>**Default Value:** <kdb>null</kdb> for IDE &lt; 2017.3, <kdb>builtin java version</kdb>  for IDE &gt;= 2017.3 |
| <kbd>ideDirectory</kbd> Path to IDE distribution that will be used to run the IDE with the plugin. | path to IDE-dependency |
| <kbd>configDirectory</kbd> Path to configuration directory. | <kbd>${intellij.sandboxDirectory}/config</kbd> |
| <kbd>pluginsDirectory</kbd> Path to plugins directory. | <kbd>${intellij.sandboxDirectory}/plugins</kbd> |
| <kbd>systemDirectory</kbd> Path to indexes directory. | <kbd>${intellij.sandboxDirectory}/system</kbd> |
| <kbd>autoReloadPlugins</kbd> Enable/disable auto-reload of dynamic plugins. | <kbd>true</kbd> for IDE >= 2020.2 |

### Patching DSL
The following attributes are a part of the Patching DSL <kbd>patchPluginXml { ... }</kbd> in which allows Gradle to patch specific attributes in a set of `plugin.xml` files.

> **TIP** To maintain and generate an up-to-date changelog, try using [Gradle Changelog Plugin](https://github.com/JetBrains/gradle-changelog-plugin).

| **Attributes**            | **Default Value** |
| :------------------------ |  :---------------- |
| <kbd>version</kbd> is a value for the `<version>` tag.                                | <kbd>project.version</kbd> |
| <kbd>sinceBuild</kbd> is for the `since-build` attribute of the `<idea-version>` tag. | <kbd>intellij.version</kbd> in `Branch.Build.Fix` format |
| <kbd>untilBuild</kbd> is for the `until-build` attribute of the `<idea-version>` tag. | <kbd>intellij.version</kbd> in `Branch.Build.*` format |
| <kbd>pluginDescription</kbd> is for the `<description>` tag.                          | none |
| <kbd>changeNotes</kbd> is for the `<change-notes>` tag.                               | none |
| <kbd>pluginXmlFiles</kbd> is a collection of xml files to patch.                      | All `plugin.xml` files with `<idea-plugin>` |
| <kbd>destinationDir</kbd> is a directory to store patched xml files.                  | <kbd>'${project.buildDir}/patchedPluginXmlFiles'</kbd> |

### Plugin Verifier DSL
[IntelliJ Plugin Verifier](https://github.com/JetBrains/intellij-plugin-verifier) integration task allows to check the binary compatibility of the built plugin against the specified [IntelliJ IDE builds](https://jetbrains.org/intellij/sdk/docs/reference_guide/api_changes_list.html).

Plugin Verifier DSL `runPluginVerifier { ... }` allows to define the list of IDEs used for the verification, as well as explicit tool version and any of the available [options](https://github.com/JetBrains/intellij-plugin-verifier#common-options) by proxifying them to the Verifier CLI.

> **TIP** For more details, examples or issues reporting, go to the [IntelliJ Plugin Verifier](https://github.com/JetBrains/intellij-plugin-verifier) repository.

| **Attributes**                                                                                                                                                        | **Default Value**                                     |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------- |
| <kbd>ideVersions</kbd> - Array of IDEs to check, in `intellij.version` format, like: `IC-2020.2`; if not set, uses `intellij`. Should be set for the best experience. | <kbd>["${intellij.type}-${intellij.version}"]</kbd>   |
| <kbd>verifierVersion</kbd> - IntelliJ Plugin Verifier version, by default uses the latest available. It's recommended to use always the latest version.               | <kbd>latest</kbd>                                     |
| <kbd>localPaths</kbd> - A list of the paths to locally installed IDE distributions that should be used for verification. Property does not override `ideVersions`.    | <kbd>[]</kbd>                                         |
| <kbd>distributionFile</kbd> - Jar or Zip file of plugin to verify.                                                                                                    | output of `buildPlugin` task                          |
| <kbd>failureLevel</kbd> - Defines the verification level at which task should fail. Can be set as `FailureLevel` enum or `EnumSet<FailureLevel>`.                     | <kbd>FailureLevel.INVALID_PLUGIN</kbd>                |
| <kbd>verificationReportsDirectory</kbd> - The path to directory where verification reports will be saved.                                                             | <kbd>${project.buildDir}/reports/pluginVerifier</kbd> |
| <kbd>jbrVersion</kbd> - JBR version used by the Verifier.                                                                                                             | none                                                  |
| <kbd>runtimeDir</kbd> - The path to directory containing Java runtime, overrides JBR.                                                                                 | none                                                  |
| <kbd>externalPrefixes</kbd> - The prefixes of classes from the external libraries.                                                                                    | none                                                  |
| <kbd>teamCityOutputFormat</kbd> - Specify this flag if you want to print the TeamCity compatible output on stdout.                                                    | none                                                  |
| <kbd>subsystemsToCheck</kbd> - Specifies which subsystems of IDE should be checked. Available options: `all` (default), `android-only`, `without-android`.            | none                                                  |

### Publishing DSL
The following attributes are a part of the Publishing DSL <kbd>publishPlugin { ... }</kbd> in which allows Gradle to upload a working plugin to the JetBrains Plugin Repository. Note that you need to upload the plugin to the repository at least once manually (to specify options like the license, repository URL etc.) before uploads through Gradle can be used.

See the instruction on how to generate authentication token: https://plugins.jetbrains.com/docs/marketplace/plugin-upload.html

See [Publishing Plugins with Gradle](https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/deployment.html) tutorial for step-by-step instructions.

| **Attributes**              | **Default Value**  |
| :-------------------------- | :----------------- |
| <kbd>token</kbd> Authentication token. | none |
| <kbd>channels</kbd> List of channel names to upload plugin to.  | <kbd>[default]</kbd> |
| <kbd>host</kbd>  URL host of a plugin repository.               | <kbd>https://plugins.jetbrains.com</kbd> |
| <kbd>distributionFile</kbd> Jar or Zip file of plugin to upload. | output of `buildPlugin` task |

### Instrumenting DSL
The following attributes help you to tune instrumenting behaviour in <kbd>instrumentCode { ... }</kbd> block.

| **Attributes**            | **Default Value** |
| :------------------------ |  :---------------- |
| <kbd>compilerVersion</kbd> is a version of instrumenting compiler. It's used for non-IDEA plugins (e.g. CLion or Rider). | <kbd>Build number of the IDE dependency</kbd> |

pre}{\n}
